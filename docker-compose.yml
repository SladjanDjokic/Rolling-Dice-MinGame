version: "3.8"
services:
  amera-dns:
    container_name: amera-dns
    image: andyshinn/dnsmasq:latest
    restart: always
    command: >
      --log-queries
      --log-facility=-
      --address=/dev.amera.local/127.0.0.1
    deploy:
      resources:
        limits:
          memory: 16M
    ports:
      - "5380:53"
      - "5380:53/udp"
    cap_add:
      - NET_ADMIN
    networks:
      - amera-net
    # depends_on:
    #   - socat

  # Unsure if we still need this
  # socat:
  #   container_name: amera-dns-socat
  #   image: alpine/socat
  #   command: tcp-listen:80,fork,reuseaddr tcp-connect:host.docker.internal:9000
  #   environment:
  #     - VIRTUAL_HOST=dev.amera.local
  #     - VIRTUAL_PORT=80
  #   expose:
  #     - 80

  amera-nginx:
    container_name: amera-nginx
    image: nginx:alpine
    restart: always
    logging:
      options:
        max-size: "10m"
        max-file: "1"
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    ports:
      - 9000:9000
      - 9443:443
      - 443:443
    # command: [nginx-debug, "-g", "daemon off;"] # Uncomment if want to enable debug mode
    # extra_hosts:
    #   - "host.docker.internal:host-gateway" # For Linux
    networks:
      amera-net:
        aliases:
          - amera-tmp
          - amera-web-share
          - amera-web-auth
          - amera-web-main
          - amera-web-notifications
          - amera-signaling
          - amera-eventserver
    volumes:
      - ../web:/app/main:ro
      - ../web-share:/app/share:ro
      - ../web-api/config/dev-nginx.conf:/etc/nginx/nginx.conf:ro
      - ../web-api/config/dev-nginx-locations.conf:/etc/nginx/locations.conf:ro
      - ../web-api/certs/wildcard.dev.amera.local.crt:/certs/dev.crt:ro
      - ../web-api/certs/dev.amera.local.key:/certs/dev.key:ro
      - web-nginx-cache:/data/nginx/cache
    depends_on:
      amera-dns:
        condition: service_started
      amera-web-api:
        condition: service_healthy
      # amera-eventserver:
      #   condition: service_healthy
      # amera-web-auth:
      #   condition: service_healthy

  # amera-web-auth:
  #   container_name: amera-web-auth
  #   image: amera-web-api:latest
  #   restart: always
  #   logging:
  #     options:
  #       max-size: "10m"
  #       max-file: "1"
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 512M
  #       reservations:
  #         memory: 128M
  #   build:
  #     context: ../web-api
  #     dockerfile: Dockerfile.dev
  #   depends_on:
  #     amera-web-db:
  #       condition: service_healthy
  #     amera-web-api:
  #       condition: service_healthy
  #     # kafka:
  #     #   condition: service_started
  #   networks:
  #     - amera-net
  #   expose:
  #     - 5000
  #   ports:
  #     - 5000:5000
  #   environment:
  #     - AMERA_API_KAFKA.BOOTSTRAP_SERVERS=kafka:9092
  #   volumes:
  #     - ../web-api:/app
  #     - web-api-python-packages:/root/.local/share
  #   command: ["pipenv", "run", "local"]
  #   healthcheck:
  #     # test: CMD wget --no-verbose --tries=1 --spider http://localhost:5000/healthz || exit 1
  #     test: ["CMD", "curl", "-f", "http://localhost:5000/healthz"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 22

  # amera-web-main:
  #   container_name: amera-web-main
  #   image: amera-web-main:latest
  #   restart: always
  #   logging:
  #     options:
  #       max-size: "10m"
  #       max-file: "1"
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 256M
  #       reservations:
  #         memory: 12M
  #   build:
  #     context: ../web
  #     dockerfile: Dockerfile.dev
  #   networks:
  #     - amera-net
  #   expose:
  #     - 5001
  #   volumes:
  #     - ../web:/app
  #     - web-main-python-packages:/root/.local/share
  #   command: ["pipenv", "run", "dev"]
  #   depends_on:
  #     amera-web-api:
  #       condition: service_healthy

  # amera-web-share:
  #   container_name: amera-web-share
  #   image: amera-web-share:latest
  #   restart: always
  #   logging:
  #     options:
  #       max-size: "10m"
  #       max-file: "1"
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 1G
  #   user: node
  #   build:
  #     context: ../web-share
  #     dockerfile: Dockerfile.dev
  #   environment:
  #     NODE_ENV: development
  #     PUBLIC_URL: /share
  #   networks:
  #     - amera-net
  #   expose:
  #     - 3000
  #   volumes:
  #     - web-share-yarn-packages:/home/node/yarn-cache:cached
  #     - web-share-node_modules:/home/node/app/node_modules:cached
  #     - ../web-share:/home/node/app
  #   stdin_open: true
  #   command: ["yarn", "start"]
  #   depends_on:
  #     amera-web-api:
  #       condition: service_healthy

  amera-web-api:
    container_name: amera-web-api
    image: amera-web-api:latest
    restart: always
    # logging:
    #   options:
    #     max-size: "10m"
    #     max-file: "1"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M
    build:
      context: ../web-api
      dockerfile: Dockerfile.dev
    depends_on:
      amera-web-db:
        condition: service_healthy
      # kafka:
      #   condition: service_started
    networks:
      - amera-net
    expose:
      - 5000
    ports:
      - 5000:5000
    environment:
      # Application Defaults
      - AMERA_API_ENV_NAME=LOCAL
      - AMERA_API_LOG_LEVEL=INFO
      - AMERA_API_DATABASE.LOG_LEVEL=INFO
      - AMERA_API_WEB.SESSION_EXPIRATION=31536000
      # Application Kafka
      - AMERA_API_KAFKA.CALLS_TOPIC=calls
      - AMERA_API_KAFKA.SMS_TOPIC=sms
      - AMERA_API_KAFKA.EMAIL_TOPIC=email
      - AMERA_API_KAFKA.CHAT_TOPIC=chat
      - AMERA_API_KAFKA.CALENDAR_TOPIC=calendar
      - AMERA_API_KAFKA.BOOTSTRAP_SERVERS=kafka:9092
      # Github OAuth
      - AMERA_API_SERVICES.GITHUB.CALLBACK_URI_PATH=/api/github/oauth
      - AMERA_API_SERVICES.GITHUB.API_URL=https://api.github.com/user
      - AMERA_API_SERVICES.GITHUB.AUTHORIZATION_URL=https://github.com/login/oauth/authorize
      - AMERA_API_SERVICES.GITHUB.TOKEN_URL=https://github.com/login/oauth/access_token
    volumes:
      - ../web-api:/app
      - web-api-python-packages:/root/.local/share
    command: ["pipenv", "run", "local"]
    healthcheck:
      # test: CMD wget --no-verbose --tries=1 --spider http://localhost:5000/healthz || exit 1
      test: ["CMD", "curl", "-f", "http://localhost:5000/healthz"]
      interval: 30s
      timeout: 1s
      retries: 1000

  amera-signaling:
    container_name: amera-signaling
    image: amera-signaling:latest
    restart: always
    logging:
      options:
        max-size: "500k"
        max-file: "1"
    build:
      context: ../web-signaling/
      dockerfile: Dockerfile
    networks:
      - amera-net
    ports:
      - 8080:8080
    expose:
      - 8080
    volumes:
      - ../web-signaling:/app
      - demo-signaling-python-packages:/root/.local/share
    command: ["pipenv", "run", "docker"]

  amera-eventserver:
    container_name: amera-eventserver
    image: amera-web-api:latest
    restart: always
    logging:
      options:
        max-size: "10m"
        max-file: "1"
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 12M
    depends_on:
      # kafka:
      #   condition: service_healthy
      # zookeeper:
      #   condition: service_started
      amera-web-api:
        condition: service_healthy
    environment:
      # Application Defaults
      - AMERA_API_ENV_NAME=LOCAL
      - AMERA_API_LOG_LEVEL=INFO
      - AMERA_API_DATABASE.LOG_LEVEL=INFO
      - AMERA_API_WEB.SESSION_EXPIRATION=31536000
      # Application Kafka
      - AMERA_API_KAFKA.CALLS_TOPIC=calls
      - AMERA_API_KAFKA.SMS_TOPIC=sms
      - AMERA_API_KAFKA.EMAIL_TOPIC=email
      - AMERA_API_KAFKA.CHAT_TOPIC=chat
      - AMERA_API_KAFKA.CALENDAR_TOPIC=calendar
      - AMERA_API_KAFKA.BOOTSTRAP_SERVERS=kafka:9092
      # Github OAuth
      - AMERA_API_SERVICES.GITHUB.AUTHORIZATION_URL=https://github.com/login/oauth/authorize
      - AMERA_API_SERVICES.GITHUB.TOKEN_URL=https://github.com/login/oauth/access_token
    networks:
      - amera-net
    expose:
      - 4000
    ports:
      - 4000:4000
    volumes:
      - ../web-api:/app
      - web-api-python-packages:/root/.local/share
    # command: [ "uvicorn", "--app-dir=./eventserver", "test-star:app", "--host", "0.0.0.0", "--port", "4000", "--reload" ]
    command:
      [
        "gunicorn",
        "--chdir",
        "eventserver",
        "sse:app",
        "--reload",
        "--bind=0.0.0.0:4000",
        "-k",
        "uvicorn.workers.UvicornWorker",
        "--log-level=DEBUG",
      ]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/healthz"]
      interval: 30s
      timeout: 1s
      retries: 1000

  amera-web-db:
    container_name: amera-web-db
    image: postgres:latest
    restart: always
    logging:
      options:
        max-size: "10k"
        max-file: "1"
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 2G
    volumes:
      # Schema creation/updates
      - ../web-api/datasource/postgresql/members.sql:/docker-entrypoint-initdb.d/1-members.sql
      - ../web-api/datasource/postgresql/group.sql:/docker-entrypoint-initdb.d/2-group.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-07-21.sql:/docker-entrypoint-initdb.d/3-1-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-08-13.sql:/docker-entrypoint-initdb.d/3-2-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-08-14.sql:/docker-entrypoint-initdb.d/3-3-schema-updates.sql
      - ../web-api/datasource/postgresql/scheduler.sql:/docker-entrypoint-initdb.d/4-scheduler.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-08-15-schedulersetting.sql:/docker-entrypoint-initdb.d/5-1-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-08-26.sql:/docker-entrypoint-initdb.d/5-2-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-08-29.sql:/docker-entrypoint-initdb.d/5-3-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-09-01.sql:/docker-entrypoint-initdb.d/5-4-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-09-02.sql:/docker-entrypoint-initdb.d/5-5-schema-updates.sql
      - ../web-api/datasource/postgresql/member_contact.sql:/docker-entrypoint-initdb.d/7-member_contact.sql
      - ../web-api/datasource/postgresql/country_code.sql:/docker-entrypoint-initdb.d/8-country_code.sql
      - ../web-api/datasource/postgresql/job-title.sql:/docker-entrypoint-initdb.d/9-job-title.sql
      - ../web-api/datasource/postgresql/amera_tos.sql:/docker-entrypoint-initdb.d/a-amera_tos.sql
      - ../web-api/datasource/postgresql/member_tos.sql:/docker-entrypoint-initdb.d/b-member-tos.sql
      - ../web-api/datasource/postgresql/cell_token.sql:/docker-entrypoint-initdb.d/c-cell-token.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-09-04_member_avatar.sql:/docker-entrypoint-initdb.d/d-1-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-09-07.sql:/docker-entrypoint-initdb.d/d-2-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-09-09.sql:/docker-entrypoint-initdb.d/d-3-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-09-17.sql:/docker-entrypoint-initdb.d/d-4-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-09-26_member.sql:/docker-entrypoint-initdb.d/d-5-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-09-25.sql:/docker-entrypoint-initdb.d/d-6-schema-updates.sql
      - ../web-api/datasource/postgresql/promo_codes.sql:/docker-entrypoint-initdb.d/d-7-promo-codes.sql
      - ../web-api/datasource/postgresql/department.sql:/docker-entrypoint-initdb.d/d-8-department.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-09-28_deps_to_member.sql:/docker-entrypoint-initdb.d/d-9-schema-updates.sql
      - ../web-api/datasource/postgresql/member_achievement.sql:/docker-entrypoint-initdb.d/e-1-member_achievement.sql
      - ../web-api/datasource/postgresql/member_profile.sql:/docker-entrypoint-initdb.d/e-2-member_profile.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-10-08_1_titles.sql:/docker-entrypoint-initdb.d/e-3-unset-titles.sql
      - ../web-api/datasource/postgresql/email_token.sql:/docker-entrypoint-initdb.d/e-4-schema-updates.sql
      - ../web-api/datasource/postgresql/file_tree.sql:/docker-entrypoint-initdb.d/e-5-file_tree.sql
      - ../web-api/datasource/postgresql/file_tree_item.sql:/docker-entrypoint-initdb.d/e-6-file_tree_item.sql
      - ../web-api/datasource/postgresql/file_share.sql:/docker-entrypoint-initdb.d/e-7-file_share.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-10-22_invites.sql:/docker-entrypoint-initdb.d/e-8-schema-updates.sql
      - ../web-api/datasource/postgresql/event.sql:/docker-entrypoint-initdb.d/f-1-event.sql
      - ../web-api/datasource/postgresql/event_invite.sql:/docker-entrypoint-initdb.d/f-2-event_invite.sql
      - ../web-api/datasource/postgresql/event_reschedule.sql:/docker-entrypoint-initdb.d/f-3-event_reschedule.sql
      - ../web-api/datasource/postgresql/mail.sql:/docker-entrypoint-initdb.d/f-4-mail.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-12-04.sql:/docker-entrypoint-initdb.d/f-5-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-12-17.sql:/docker-entrypoint-initdb.d/f-6-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-12-18_invites.sql:/docker-entrypoint-initdb.d/f-7-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-12-31.sql:/docker-entrypoint-initdb.d/f-8-schema-updates.sql
      - ../web-api/datasource/postgresql/timezone.sql:/docker-entrypoint-initdb.d/g-1-timezone.sql
      - ../web-api/datasource/postgresql/event_color.sql:/docker-entrypoint-initdb.d/g-2-event-color.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-12-21_event_2.sql:/docker-entrypoint-initdb.d/g-3-event-2.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-12-21_role.sql:/docker-entrypoint-initdb.d/g-4-schema-updates.sql
      - ../web-api/datasource/postgresql/activity_trace.sql:/docker-entrypoint-initdb.d/h-1-activity_trace.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-12-22_member_session.sql:/docker-entrypoint-initdb.d/h-2-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-12-23-contact-update.sql:/docker-entrypoint-initdb.d/h-3-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2020-12-25_event_2.sql:/docker-entrypoint-initdb.d/h-4-schema-updates.event-2.sql
      - ../web-api/datasource/postgresql/schema-updates-2021-1-4-member_profile.sql:/docker-entrypoint-initdb.d/h-5-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2021-01-04_member_profile_security_update.sql:/docker-entrypoint-initdb.d/h-6-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2021-01-04_member_session_status.sql:/docker-entrypoint-initdb.d/h-7-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2021-01-08_event_invite_group.sql:/docker-entrypoint-initdb.d/h-8-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2021-01-05_file_path_function.sql:/docker-entrypoint-initdb.d/h-9-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2021-01-04.sql:/docker-entrypoint-initdb.d/h-a-schema-updates.group-1.sql
      - ../web-api/datasource/postgresql/schema-updates-2021-01-09-activity_table.sql:/docker-entrypoint-initdb.d/h-a-schema-updates.activity-table.sql
      - ../web-api/datasource/postgresql/mail_thread.sql:/docker-entrypoint-initdb.d/i-1-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2021-01-24_member-status.sql:/docker-entrypoint-initdb.d/i-2-schema-updates.sql
      - ../web-api/datasource/postgresql/schema-updates-2021-01-25-member_profile.sql:/docker-entrypoint-initdb.d/i-3-schema-updates.member_profile.sql
      - ../web-api/datasource/postgresql/schema-updates-2021-02-01_invite_status_enum.sql:/docker-entrypoint-initdb.d/i-4-schema-updates.invite_status_enum.sql
      - ../web-api/datasource/postgresql/bug_report.sql:/docker-entrypoint-initdb.d/j-1-bug_reports.sql
      - ../web-api/datasource/postgresql/schema-updates-2021-02-04-mail_header_thread.sql:/docker-entrypoint-initdb.d/j-2-schema-updates.mail_header_thread.sql
      - ../web-api/datasource/postgresql/schema-updates-2021-02-04-color-update.sql:/docker-entrypoint-initdb.d/j-3-color-update.sql
      - ../web-api/datasource/postgresql/schema-updates-2021-02-06_event_invite_feedback.sql:/docker-entrypoint-initdb.d/j-4-schema-updates.invitee_comment.sql
      - ../web-api/datasource/postgresql/schema-updates-2021-02-07_event_picture.sql:/docker-entrypoint-initdb.d/j-5-event_picture.sql
      - ../web-api/datasource/postgresql/company.sql:/docker-entrypoint-initdb.d/k-company.sql
      - ../web-api/datasource/postgresql/member_security_preferences.sql:/docker-entrypoint-initdb.d/l-member_security_preferences.sql
      - ../web-api/datasource/postgresql/face_embeddings.sql:/docker-entrypoint-initdb.d/m-face-embeddings.sql
      - ../web-api/datasource/postgresql/project.sql:/docker-entrypoint-initdb.d/n-project.sql
      - ../web-api/datasource/postgresql/state_code.sql:/docker-entrypoint-initdb.d/o-state_code.sql
      - ../web-api/datasource/postgresql/video_mail.sql:/docker-entrypoint-initdb.d/p-video_mail.sql
      - ../web-api/datasource/postgresql/schema-updates-2021-02-25_currency.sql:/docker-entrypoint-initdb.d/p-0-currency.sql
      - ../web-api/datasource/postgresql/schema-updates-2021-02-25_project.sql:/docker-entrypoint-initdb.d/p-1-project.sql
      - ../web-api/datasource/postgresql/schema-updates-2021-02-22_company.sql:/docker-entrypoint-initdb.d/p-2-company.sql
      - ../web-api/datasource/postgresql/schema-updates-2021-03-12_project_upd.sql:/docker-entrypoint-initdb.d/p-3-project.sql
      - ../web-api/datasource/postgresql/member_external_account.sql:/docker-entrypoint-initdb.d/q-member_external_account.sql
      - ../web-api/datasource/postgresql/forum.sql:/docker-entrypoint-initdb.d/q-forum.sql     
      # Test data
      - ../web-api/datasource/postgresql/test-country.dev.sql:/docker-entrypoint-initdb.d/z-1-test-country.sql
      - ../web-api/datasource/postgresql/test-member.dev.sql:/docker-entrypoint-initdb.d/z-2-test-member.sql
      - ../web-api/datasource/postgresql/test-schedule.dev.sql:/docker-entrypoint-initdb.d/z-3-test-schedule.sql
      - ../web-api/datasource/postgresql/test-amera-tos.dev.sql:/docker-entrypoint-initdb.d/z-4-test-amera-tos.dev.sql.sql
      - ../web-api/datasource/postgresql/test-promo-codes.dev.sql:/docker-entrypoint-initdb.d/z-5-test-promo-codes.dev.sql
      - ../web-api/datasource/postgresql/test-achievements.dev.sql:/docker-entrypoint-initdb.d/z-6-test-achievements.dev.sql
      - ../web-api/datasource/postgresql/test-fileshare.sql:/docker-entrypoint-initdb.d/z-7-test-fileshare.dev.sql
      - ../web-api/datasource/postgresql/test-event.dev.sql:/docker-entrypoint-initdb.d/z-8-test-event.dev.sql
      - ../web-api/datasource/postgresql/test-company.dev.sql:/docker-entrypoint-initdb.d/z-9-0-test-company.dev.sql
      - ../web-api/datasource/postgresql/test-company-role_xref.dev.sql:/docker-entrypoint-initdb.d/z-9-1-test-company-roles.dev.sql
      - ../web-api/datasource/postgresql/test-project.dev.sql:/docker-entrypoint-initdb.d/z-9-2-test-project-dev.sql
      - ../web-api/datasource/postgresql/test-member-contact-2.sql:/docker-entrypoint-initdb.d/z-9-3-test-member-contact-2.sql

    environment:
      POSTGRES_DB: ameraiot
      POSTGRES_USER: amera
      POSTGRES_PASSWORD: amera
    networks:
      - amera-net
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U amera -d ameraiot"]
      interval: 10s
      timeout: 5s
      retries: 15

  # amera-web-notifications:
  #   container_name: amera-web-notifications
  #   image: amera-web-notifications:latest
  #   restart: always
  #   user: node
  #   build:
  #     context: ../web-notifications
  #     dockerfile: Dockerfile.dev
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 96M
  #       reservations:
  #         memory: 48M
  #   networks:
  #     amera-net:
  #       aliases:
  #         - amera-eventserver
  #   ports:
  #     - 5070:5070
  #   expose:
  #     - 5070
  #   environment:
  #     NODE_ENV: development
  #     PORT: 5070
  #     SSE_KEEPALIVE_RATE_SECS: 2
  #     SSE_PING_RATE_SECS: 2
  #     PG_USER: amera
  #     PG_HOST: amera-web-db
  #     PG_DATABASE: ameraiot
  #     PG_PASSWORD: amera
  #     PG_PORT: 5432
  #     DEBUG: express:*
  #   volumes:
  #     - ../web-notifications:/home/node/app
  #   stdin_open: true
  #   command: ['yarn', 'start']
  #   depends_on:
  #     amera-web-db:
  #       condition: service_healthy

  amera-call-consumer:
    container_name: amera-call-consumer
    image: amera-web-api:latest
    restart: always
    logging:
      options:
        max-size: "10m"
        max-file: "1"
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 48M
    networks:
      - amera-net
    volumes:
      - ../web-api:/app
      - web-api-python-packages:/root/.local/share
    environment:
      # Application Defaults
      - AMERA_API_ENV_NAME=LOCAL
      - AMERA_API_LOG_LEVEL=INFO
      - AMERA_API_DATABASE.LOG_LEVEL=INFO
      - AMERA_API_WEB.SESSION_EXPIRATION=31536000
      # Application Kafka
      - AMERA_API_KAFKA.CALLS_TOPIC=calls
      - AMERA_API_KAFKA.SMS_TOPIC=sms
      - AMERA_API_KAFKA.EMAIL_TOPIC=email
      - AMERA_API_KAFKA.CHAT_TOPIC=chat
      - AMERA_API_KAFKA.CALENDAR_TOPIC=calendar
      - AMERA_API_KAFKA.BOOTSTRAP_SERVERS=kafka:9092
      - AMERA_API_KAFKA.SERVER=kafka:9092
      # Github OAuth
      - AMERA_API_SERVICES.GITHUB.AUTHORIZATION_URL=https://github.com/login/oauth/authorize
      - AMERA_API_SERVICES.GITHUB.TOKEN_URL=https://github.com/login/oauth/access_token
    depends_on:
      kafka:
        condition: service_healthy
      amera-web-api:
        condition: service_healthy
      amera-eventserver:
        condition: service_healthy
    #    command: [ "pipenv", "run", "email"]
    command: ["pipenv", "run", "dev-calls"]

  amera-email-consumer:
    container_name: amera-email-consumer
    image: amera-web-api:latest
    restart: always
    logging:
      options:
        max-size: "10m"
        max-file: "1"
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 48M
    networks:
      - amera-net
    volumes:
      - ../web-api:/app
      - web-api-python-packages:/root/.local/share
    environment:
      # Application Defaults
      - AMERA_API_ENV_NAME=LOCAL
      - AMERA_API_LOG_LEVEL=INFO
      - AMERA_API_DATABASE.LOG_LEVEL=INFO
      - AMERA_API_WEB.SESSION_EXPIRATION=31536000
      # Application Kafka
      - AMERA_API_KAFKA.CALLS_TOPIC=calls
      - AMERA_API_KAFKA.SMS_TOPIC=sms
      - AMERA_API_KAFKA.EMAIL_TOPIC=email
      - AMERA_API_KAFKA.CHAT_TOPIC=chat
      - AMERA_API_KAFKA.CALENDAR_TOPIC=calendar
      - AMERA_API_KAFKA.BOOTSTRAP_SERVERS=kafka:9092
      - AMERA_API_KAFKA.SERVER=kafka:9092
      # Github OAuth
      - AMERA_API_SERVICES.GITHUB.AUTHORIZATION_URL=https://github.com/login/oauth/authorize
      - AMERA_API_SERVICES.GITHUB.TOKEN_URL=https://github.com/login/oauth/access_token
    depends_on:
      kafka:
        condition: service_started
      zookeeper:
        condition: service_started
      amera-web-api:
        condition: service_healthy
      amera-eventserver:
        condition: service_healthy
    # command: [ "pipenv", "run", "emails" ]
    command: ["pipenv", "run", "dev-email"]

  amera-sms-consumer:
    container_name: amera-sms-consumer
    image: amera-web-api:latest
    restart: always
    logging:
      options:
        max-size: "10m"
        max-file: "1"
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 48M
    networks:
      - amera-net
    volumes:
      - ../web-api:/app
      - web-api-python-packages:/root/.local/share
    environment:
      # Application Defaults
      - AMERA_API_ENV_NAME=LOCAL
      - AMERA_API_LOG_LEVEL=INFO
      - AMERA_API_DATABASE.LOG_LEVEL=INFO
      - AMERA_API_WEB.SESSION_EXPIRATION=31536000
      # Application Kafka
      - AMERA_API_KAFKA.CALLS_TOPIC=calls
      - AMERA_API_KAFKA.SMS_TOPIC=sms
      - AMERA_API_KAFKA.EMAIL_TOPIC=email
      - AMERA_API_KAFKA.CHAT_TOPIC=chat
      - AMERA_API_KAFKA.CALENDAR_TOPIC=calendar
      - AMERA_API_KAFKA.BOOTSTRAP_SERVERS=kafka:9092
      - AMERA_API_KAFKA.SERVER=kafka:9092
      # Github OAuth
      - AMERA_API_SERVICES.GITHUB.AUTHORIZATION_URL=https://github.com/login/oauth/authorize
      - AMERA_API_SERVICES.GITHUB.TOKEN_URL=https://github.com/login/oauth/access_token
    depends_on:
      kafka:
        condition: service_started
      zookeeper:
        condition: service_started
      amera-web-api:
        condition: service_healthy
      amera-eventserver:
        condition: service_healthy
    # command: [ "pipenv", "run", "sms" ]
    command: ["pipenv", "run", "dev-sms"]

  # Kafka and Zookeeper Single Deploy
  zookeeper:
    image: "bitnami/zookeeper:latest"
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - amera-net
    logging:
      options:
        max-size: "10m"
        max-file: "1"
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 50M

  kafka:
    image: "bitnami/kafka:latest"
    container_name: kafka
    ports:
      - "29092:29092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:29092
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    networks:
      - amera-net
    logging:
      options:
        max-size: "10m"
        max-file: "1"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 192M
    healthcheck:
      test:
        ["CMD", "kafka-topics.sh", "--list", "--zookeeper", "zookeeper:2181"]
      interval: 30s
      timeout: 10s
      retries: 10

volumes:
  web-nginx-cache:
    name: amera-nginx-cache
  web-api-python-packages:
    name: amera-web-api-python-packages
  web-main-python-packages:
    name: amera-web-main-python-packages
  web-share-yarn-packages:
    name: amera-web-share-yarn-packages
  web-share-node_modules:
    name: amera-web-share-node_modules
  demo-signaling-python-packages:
    name: demo-signaling-python-packages
networks:
  amera-net:
    name: amera-net
